# SQLAlchemy 
# Python에서 가장 널리 사용되는 ORM(Object Relational Mapper) 라이브러리
# 데이터베이스와 Python 객체 간 매핑 지원
# SQL 쿼리 직접 작성하지 않고 DB작업 수행 가능
# SQLAlchemy는 ORM 뿐 아니라 Core라는 SQL 생성 및 DB 추상화 계층 제공
# DB 독립성 제공, 다양한 DBMS 호환(PostgreSQL, MySQL, SQLite)
# ORM을 통해 객체 지향적으로 DB 사용

# SQLAlchemy는 create_engine을 활용하여 DB 연결

# DB 연결
from sqlalchemy import create_engine
engine = create_engine('postgresql://postgres:qazxsw21@127.0.0.1/postgres', echo=True)

## echo : SQLAlchemy 로깅 활성화 여부, True : SQLAlchemy가 수행하는 모든 SQL문 콘솔 출력, 개발 과정에서 SQL 문 실행 확인에 유용

# 테이블 매핑
# declarative_base를 사용하여 DB 테이블과 Python 클래스 매핑
from sqlalchemy.orm import declarative_base

'''
장점
1. SQL 쿼리를 직접 작성하지 않아도 되므로 생산성이 높아집니다.
2. 데이터베이스 독립적이며 유지보수가 용이합니다.
3. 객체 지향적으로 데이터를 다룰 수 있어 코드 가독성이 향상됩니다.
단점
1. 복잡한 쿼리 작성 시 성능 저하가 발생할 수 있습니다.
2. 데이터베이스 고유 기능을 모두 활용하기 어렵습니다.
'''
